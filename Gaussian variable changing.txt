#include <iostream>
#include <stdio.h>
#include <cmath>
#include <opencv\cv.h>
#include <opencv\cxcore.h>
#include <opencv\highgui.h>
#include <opencv2\highgui.hpp>
#include <opencv2\imgproc\imgproc.hpp>

using namespace std;
using namespace cv;

int main(int argc, char* argv[]) {
    Mat img = imread(argv[1], IMREAD_UNCHANGED);
    if (!img.data) {
        cout << "Could not load image" << endl;
        waitKey(0);
        return -1;
    }

    // Gray image and initialization
    Mat gr;
    int his[256];
    int his2[256];

    for (int i = 0; i < 256; i++) {
        his[i] = 0;
        his2[i] = 0;
    }

    // Gray conversion
    cvtColor(img, gr, CV_BGR2GRAY);

    int h = gr.rows;
    int w = gr.cols;
    int val = 0;
    int max = 0;

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            val = gr.at<uchar>(i, j);
            his[val]++;
        }
    }

    for (int i = 0; i < 256; i++) {
        if (max < his[i]) {
            max = his[i];
        }
    }

    // Histogram for Original Image
    Mat him(301, 260, CV_8UC1, Scalar(255));
    int hist[256];
    double maxd = max;
    for (int i = 0; i < 256; i++) {
        hist[i] = cvRound(double(his[i] / maxd) * 300);
        Point pt1 = Point(i, 300 - hist[i]);
        Point pt2 = Point(i, 300);
        line(him, pt1, pt2, Scalar(0), 1, 8, 0);
    }

    // Gaussian Filter with Variable Kernel Size
    Mat Gaus = gr.clone();
    int kernel = 7; // Set your desired kernel size here
    double sigma = 1.0;
    double r = 2.0 * sigma * sigma;
    double s = 2.0 * sigma * sigma;
    double sum = 0.0;
    int kernelHalf = kernel / 2;
    double GKernel[15][15]; // Adjust the array size as needed

    for (int x = -kernelHalf; x <= kernelHalf; x++) {
        for (int y = -kernelHalf; y <= kernelHalf; y++) {
            r = sqrt(x * x + y * y);
            GKernel[x + kernelHalf][y + kernelHalf] = (exp(-(r * r) / s)) / (3.14 * s);
            sum += GKernel[x + kernelHalf][y + kernelHalf];
        }
    }

    for (int i = 0; i < kernel; ++i)
        for (int j = 0; j < kernel; ++j)
            GKernel[i][j] /= sum;

    for (int i = kernelHalf; i < h - kernelHalf; i++) {
        for (int j = kernelHalf; j < w - kernelHalf; j++) {
            int sum = 0;
            for (int m = -kernelHalf; m <= kernelHalf; m++) {
                for (int n = -kernelHalf; n <= kernelHalf; n++) {
                    int a = gr.at<uchar>(i + m, j + n);
                    double p = GKernel[m + kernelHalf][n + kernelHalf];
                    sum = sum + (p * a);
                }
            }
            Gaus.at<uchar>(i, j) = (uchar)sum;
        }
    }

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            val = Gaus.at<uchar>(i, j);
            his2[val] = his2[val] + 1;
        }
    }

    int max2 = 0;
    for (int i = 0; i < 256; i++) {
        if (max2 < his2[i]) {
            max2 = his2[i];
        }
    }

    Mat him2(301, 260, CV_8UC1, Scalar(255));
    int hist2[256];
    double maxd2 = max2;
    for (int i = 0; i <= 255; i++) {
        hist2[i] = cvRound(double(his2[i] / maxd2) * 300);
        Point pt1 = Point(i, 300 - hist2[i]);
        Point pt2 = Point(i, 300);
        line(him2, pt1, pt2, Scalar(0), 1, 8, 0);
    }

    imwrite("Gaussian_Edge_Image_variable.jpg", Gaus);
    imshow("Image:", gr);
    imshow("Histogram:", him);
    imshow("Gaussian Smoothed", Gaus);
    imshow("New Histogram:", him2);

    cvWaitKey(0);

    return 0;
}
