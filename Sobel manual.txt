#include "opencv2/opencv.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/core.hpp"

using namespace cv;
using namespace std;

int main(int argc, char* argv[]) {
    Mat image = imread(argv[1], IMREAD_GRAYSCALE);

    if (!image.data) {
        cout << "Could not find the image!" << endl;
        return -1;
    }

    Mat output = image.clone();

    int T = atoi(argv[2]);
    int gx, gy, G;
    int kernel_x[3][3] = { {-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1} };
    int kernel_y[3][3] = { {-1, -2, -1}, {0, 0, 0}, {1, 2, 1} };

    for (int i = 1; i < image.rows - 1; i++) {
        for (int j = 1; j < image.cols - 1; j++) {
            gx = 0;
            gy = 0;
            for (int m = -1; m <= 1; m++) {
                for (int n = -1; n <= 1; n++) {
                    gx += kernel_x[m + 1][n + 1] * image.at<uchar>(i + m, j + n);
                    gy += kernel_y[m + 1][n + 1] * image.at<uchar>(i + m, j + n);
                }
            }

            G = abs(gx) + abs(gy);

            if (G > T)
                output.at<uchar>(i, j) = 255;
            else
                output.at<uchar>(i, j) = 0;
        }
    }

    namedWindow("Image");
    imshow("Image", image);
    namedWindow("Output Image");
    imshow("Output Image", output);
    waitKey(0);
    return 0;
}